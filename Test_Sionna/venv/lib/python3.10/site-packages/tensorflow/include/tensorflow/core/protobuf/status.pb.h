// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/status.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fstatus_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fstatus_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fstatus_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2fcore_2fprotobuf_2fstatus_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2fstatus_2eproto;
namespace tensorflow {
class DerivedStatus;
class DerivedStatusDefaultTypeInternal;
extern DerivedStatusDefaultTypeInternal _DerivedStatus_default_instance_;
class StackTracePayload;
class StackTracePayloadDefaultTypeInternal;
extern StackTracePayloadDefaultTypeInternal _StackTracePayload_default_instance_;
class StackTracePayload_StackFrame;
class StackTracePayload_StackFrameDefaultTypeInternal;
extern StackTracePayload_StackFrameDefaultTypeInternal _StackTracePayload_StackFrame_default_instance_;
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::DerivedStatus* Arena::CreateMaybeMessage<::tensorflow::DerivedStatus>(Arena*);
template<> ::tensorflow::StackTracePayload* Arena::CreateMaybeMessage<::tensorflow::StackTracePayload>(Arena*);
template<> ::tensorflow::StackTracePayload_StackFrame* Arena::CreateMaybeMessage<::tensorflow::StackTracePayload_StackFrame>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {

// ===================================================================

class DerivedStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.DerivedStatus) */ {
 public:
  DerivedStatus();
  virtual ~DerivedStatus();

  DerivedStatus(const DerivedStatus& from);
  DerivedStatus(DerivedStatus&& from) noexcept
    : DerivedStatus() {
    *this = ::std::move(from);
  }

  inline DerivedStatus& operator=(const DerivedStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline DerivedStatus& operator=(DerivedStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DerivedStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DerivedStatus* internal_default_instance() {
    return reinterpret_cast<const DerivedStatus*>(
               &_DerivedStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DerivedStatus& a, DerivedStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(DerivedStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DerivedStatus* New() const final {
    return CreateMaybeMessage<DerivedStatus>(nullptr);
  }

  DerivedStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DerivedStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DerivedStatus& from);
  void MergeFrom(const DerivedStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DerivedStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.DerivedStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_2fcore_2fprotobuf_2fstatus_2eproto);
    return ::descriptor_table_tensorflow_2fcore_2fprotobuf_2fstatus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tensorflow.DerivedStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fstatus_2eproto;
};
// -------------------------------------------------------------------

class StackTracePayload_StackFrame :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.StackTracePayload.StackFrame) */ {
 public:
  StackTracePayload_StackFrame();
  virtual ~StackTracePayload_StackFrame();

  StackTracePayload_StackFrame(const StackTracePayload_StackFrame& from);
  StackTracePayload_StackFrame(StackTracePayload_StackFrame&& from) noexcept
    : StackTracePayload_StackFrame() {
    *this = ::std::move(from);
  }

  inline StackTracePayload_StackFrame& operator=(const StackTracePayload_StackFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline StackTracePayload_StackFrame& operator=(StackTracePayload_StackFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StackTracePayload_StackFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StackTracePayload_StackFrame* internal_default_instance() {
    return reinterpret_cast<const StackTracePayload_StackFrame*>(
               &_StackTracePayload_StackFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StackTracePayload_StackFrame& a, StackTracePayload_StackFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(StackTracePayload_StackFrame* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StackTracePayload_StackFrame* New() const final {
    return CreateMaybeMessage<StackTracePayload_StackFrame>(nullptr);
  }

  StackTracePayload_StackFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StackTracePayload_StackFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StackTracePayload_StackFrame& from);
  void MergeFrom(const StackTracePayload_StackFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StackTracePayload_StackFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.StackTracePayload.StackFrame";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_2fcore_2fprotobuf_2fstatus_2eproto);
    return ::descriptor_table_tensorflow_2fcore_2fprotobuf_2fstatus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
    kFunctionNameFieldNumber = 3,
    kLineNumberFieldNumber = 2,
  };
  // string file_name = 1;
  void clear_file_name();
  const std::string& file_name() const;
  void set_file_name(const std::string& value);
  void set_file_name(std::string&& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  std::string* mutable_file_name();
  std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);

  // string function_name = 3;
  void clear_function_name();
  const std::string& function_name() const;
  void set_function_name(const std::string& value);
  void set_function_name(std::string&& value);
  void set_function_name(const char* value);
  void set_function_name(const char* value, size_t size);
  std::string* mutable_function_name();
  std::string* release_function_name();
  void set_allocated_function_name(std::string* function_name);

  // int32 line_number = 2;
  void clear_line_number();
  ::PROTOBUF_NAMESPACE_ID::int32 line_number() const;
  void set_line_number(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:tensorflow.StackTracePayload.StackFrame)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr function_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 line_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fstatus_2eproto;
};
// -------------------------------------------------------------------

class StackTracePayload :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.StackTracePayload) */ {
 public:
  StackTracePayload();
  virtual ~StackTracePayload();

  StackTracePayload(const StackTracePayload& from);
  StackTracePayload(StackTracePayload&& from) noexcept
    : StackTracePayload() {
    *this = ::std::move(from);
  }

  inline StackTracePayload& operator=(const StackTracePayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline StackTracePayload& operator=(StackTracePayload&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StackTracePayload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StackTracePayload* internal_default_instance() {
    return reinterpret_cast<const StackTracePayload*>(
               &_StackTracePayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StackTracePayload& a, StackTracePayload& b) {
    a.Swap(&b);
  }
  inline void Swap(StackTracePayload* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StackTracePayload* New() const final {
    return CreateMaybeMessage<StackTracePayload>(nullptr);
  }

  StackTracePayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StackTracePayload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StackTracePayload& from);
  void MergeFrom(const StackTracePayload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StackTracePayload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.StackTracePayload";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_2fcore_2fprotobuf_2fstatus_2eproto);
    return ::descriptor_table_tensorflow_2fcore_2fprotobuf_2fstatus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef StackTracePayload_StackFrame StackFrame;

  // accessors -------------------------------------------------------

  enum : int {
    kStackFramesFieldNumber = 1,
  };
  // repeated .tensorflow.StackTracePayload.StackFrame stack_frames = 1;
  int stack_frames_size() const;
  void clear_stack_frames();
  ::tensorflow::StackTracePayload_StackFrame* mutable_stack_frames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::StackTracePayload_StackFrame >*
      mutable_stack_frames();
  const ::tensorflow::StackTracePayload_StackFrame& stack_frames(int index) const;
  ::tensorflow::StackTracePayload_StackFrame* add_stack_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::StackTracePayload_StackFrame >&
      stack_frames() const;

  // @@protoc_insertion_point(class_scope:tensorflow.StackTracePayload)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::StackTracePayload_StackFrame > stack_frames_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fstatus_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DerivedStatus

// -------------------------------------------------------------------

// StackTracePayload_StackFrame

// string file_name = 1;
inline void StackTracePayload_StackFrame::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StackTracePayload_StackFrame::file_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.StackTracePayload.StackFrame.file_name)
  return file_name_.GetNoArena();
}
inline void StackTracePayload_StackFrame::set_file_name(const std::string& value) {
  
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.StackTracePayload.StackFrame.file_name)
}
inline void StackTracePayload_StackFrame::set_file_name(std::string&& value) {
  
  file_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.StackTracePayload.StackFrame.file_name)
}
inline void StackTracePayload_StackFrame::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.StackTracePayload.StackFrame.file_name)
}
inline void StackTracePayload_StackFrame::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.StackTracePayload.StackFrame.file_name)
}
inline std::string* StackTracePayload_StackFrame::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.StackTracePayload.StackFrame.file_name)
  return file_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StackTracePayload_StackFrame::release_file_name() {
  // @@protoc_insertion_point(field_release:tensorflow.StackTracePayload.StackFrame.file_name)
  
  return file_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StackTracePayload_StackFrame::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.StackTracePayload.StackFrame.file_name)
}

// int32 line_number = 2;
inline void StackTracePayload_StackFrame::clear_line_number() {
  line_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StackTracePayload_StackFrame::line_number() const {
  // @@protoc_insertion_point(field_get:tensorflow.StackTracePayload.StackFrame.line_number)
  return line_number_;
}
inline void StackTracePayload_StackFrame::set_line_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  line_number_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.StackTracePayload.StackFrame.line_number)
}

// string function_name = 3;
inline void StackTracePayload_StackFrame::clear_function_name() {
  function_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StackTracePayload_StackFrame::function_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.StackTracePayload.StackFrame.function_name)
  return function_name_.GetNoArena();
}
inline void StackTracePayload_StackFrame::set_function_name(const std::string& value) {
  
  function_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.StackTracePayload.StackFrame.function_name)
}
inline void StackTracePayload_StackFrame::set_function_name(std::string&& value) {
  
  function_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.StackTracePayload.StackFrame.function_name)
}
inline void StackTracePayload_StackFrame::set_function_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  function_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.StackTracePayload.StackFrame.function_name)
}
inline void StackTracePayload_StackFrame::set_function_name(const char* value, size_t size) {
  
  function_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.StackTracePayload.StackFrame.function_name)
}
inline std::string* StackTracePayload_StackFrame::mutable_function_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.StackTracePayload.StackFrame.function_name)
  return function_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StackTracePayload_StackFrame::release_function_name() {
  // @@protoc_insertion_point(field_release:tensorflow.StackTracePayload.StackFrame.function_name)
  
  return function_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StackTracePayload_StackFrame::set_allocated_function_name(std::string* function_name) {
  if (function_name != nullptr) {
    
  } else {
    
  }
  function_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), function_name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.StackTracePayload.StackFrame.function_name)
}

// -------------------------------------------------------------------

// StackTracePayload

// repeated .tensorflow.StackTracePayload.StackFrame stack_frames = 1;
inline int StackTracePayload::stack_frames_size() const {
  return stack_frames_.size();
}
inline void StackTracePayload::clear_stack_frames() {
  stack_frames_.Clear();
}
inline ::tensorflow::StackTracePayload_StackFrame* StackTracePayload::mutable_stack_frames(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.StackTracePayload.stack_frames)
  return stack_frames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::StackTracePayload_StackFrame >*
StackTracePayload::mutable_stack_frames() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.StackTracePayload.stack_frames)
  return &stack_frames_;
}
inline const ::tensorflow::StackTracePayload_StackFrame& StackTracePayload::stack_frames(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.StackTracePayload.stack_frames)
  return stack_frames_.Get(index);
}
inline ::tensorflow::StackTracePayload_StackFrame* StackTracePayload::add_stack_frames() {
  // @@protoc_insertion_point(field_add:tensorflow.StackTracePayload.stack_frames)
  return stack_frames_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::StackTracePayload_StackFrame >&
StackTracePayload::stack_frames() const {
  // @@protoc_insertion_point(field_list:tensorflow.StackTracePayload.stack_frames)
  return stack_frames_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fstatus_2eproto
